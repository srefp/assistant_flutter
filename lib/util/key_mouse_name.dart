import 'package:flutter/gestures.dart';
import 'package:flutter/services.dart';
import 'package:win32/win32.dart';

// 定义键码到键名的映射
final Map<int, String> keyCodeToNameMap = {
  VIRTUAL_KEY.VK_OEM_1: 'oem1',
  VIRTUAL_KEY.VK_OEM_2: 'oem2',
  VIRTUAL_KEY.VK_OEM_3: 'oem3',
  VIRTUAL_KEY.VK_OEM_4: 'oem4',
  VIRTUAL_KEY.VK_OEM_5: 'oem5',
  VIRTUAL_KEY.VK_OEM_6: 'oem6',
  VIRTUAL_KEY.VK_OEM_7: 'oem7',
  VIRTUAL_KEY.VK_OEM_8: 'oem8',
  VIRTUAL_KEY.VK_OEM_102: 'oem102',
  VIRTUAL_KEY.VK_BACK: 'backspace',
  VIRTUAL_KEY.VK_TAB: 'tab',
  VIRTUAL_KEY.VK_RETURN: 'enter',
  VIRTUAL_KEY.VK_ESCAPE: 'esc',
  VIRTUAL_KEY.VK_SPACE: 'space',
  VIRTUAL_KEY.VK_PRIOR: 'pageup',
  VIRTUAL_KEY.VK_NEXT: 'pagedown',
  VIRTUAL_KEY.VK_END: 'end',
  VIRTUAL_KEY.VK_HOME: 'home',
  VIRTUAL_KEY.VK_LEFT: 'left',
  VIRTUAL_KEY.VK_UP: 'up',
  VIRTUAL_KEY.VK_RIGHT: 'right',
  VIRTUAL_KEY.VK_DOWN: 'down',
  VIRTUAL_KEY.VK_DELETE: 'delete',
  VIRTUAL_KEY.VK_CAPITAL: 'capslock',
  VIRTUAL_KEY.VK_NUMLOCK: 'numlock',
  VIRTUAL_KEY.VK_SCROLL: 'scrolllock',
  VIRTUAL_KEY.VK_SNAPSHOT: 'printscreen',
  VIRTUAL_KEY.VK_INSERT: 'insert',
  VIRTUAL_KEY.VK_LSHIFT: 'shiftleft',
  VIRTUAL_KEY.VK_RSHIFT: 'shiftright',
  VIRTUAL_KEY.VK_LCONTROL: 'ctrlleft',
  VIRTUAL_KEY.VK_RCONTROL: 'ctrlright',
  VIRTUAL_KEY.VK_LMENU: 'altleft',
  VIRTUAL_KEY.VK_RMENU: 'altright',
  VIRTUAL_KEY.VK_LWIN: 'winleft',
  VIRTUAL_KEY.VK_RWIN: 'winright',
  VIRTUAL_KEY.VK_F1: 'f1',
  VIRTUAL_KEY.VK_F2: 'f2',
  VIRTUAL_KEY.VK_F3: 'f3',
  VIRTUAL_KEY.VK_F4: 'f4',
  VIRTUAL_KEY.VK_F5: 'f5',
  VIRTUAL_KEY.VK_F6: 'f6',
  VIRTUAL_KEY.VK_F7: 'f7',
  VIRTUAL_KEY.VK_F8: 'f8',
  VIRTUAL_KEY.VK_F9: 'f9',
  VIRTUAL_KEY.VK_F10: 'f10',
  VIRTUAL_KEY.VK_F11: 'f11',
  VIRTUAL_KEY.VK_F12: 'f12',
  VIRTUAL_KEY.VK_F13: 'f13',
  VIRTUAL_KEY.VK_F14: 'f14',
  VIRTUAL_KEY.VK_F15: 'f15',
  VIRTUAL_KEY.VK_F16: 'f16',
  VIRTUAL_KEY.VK_F17: 'f17',
  VIRTUAL_KEY.VK_F18: 'f18',
  VIRTUAL_KEY.VK_F19: 'f19',
  VIRTUAL_KEY.VK_F20: 'f20',
  VIRTUAL_KEY.VK_F21: 'f21',
  VIRTUAL_KEY.VK_F22: 'f22',
  VIRTUAL_KEY.VK_F23: 'f23',
  VIRTUAL_KEY.VK_F24: 'f24',
};

final physicalKeyMap = {
  PhysicalKeyboardKey.f1: 'f1',
  PhysicalKeyboardKey.f2: 'f2',
  PhysicalKeyboardKey.f3: 'f3',
  PhysicalKeyboardKey.f4: 'f4',
  PhysicalKeyboardKey.f5: 'f5',
  PhysicalKeyboardKey.f6: 'f6',
  PhysicalKeyboardKey.f7: 'f7',
  PhysicalKeyboardKey.f8: 'f8',
  PhysicalKeyboardKey.f9: 'f9',
  PhysicalKeyboardKey.f10: 'f10',
  PhysicalKeyboardKey.f11: 'f11',
  PhysicalKeyboardKey.f12: 'f12',
  PhysicalKeyboardKey.tab: 'tab',
  PhysicalKeyboardKey.space: 'space',
  PhysicalKeyboardKey.backspace: 'backspace',
  PhysicalKeyboardKey.delete: 'delete',
  PhysicalKeyboardKey.capsLock: 'capslock',
  PhysicalKeyboardKey.shiftLeft: 'shiftleft',
  PhysicalKeyboardKey.shiftRight: 'shiftright',
  PhysicalKeyboardKey.controlLeft: 'ctrlleft',
  PhysicalKeyboardKey.controlRight: 'ctrlright',
  PhysicalKeyboardKey.altLeft: 'altleft',
  PhysicalKeyboardKey.altRight: 'altright',
  PhysicalKeyboardKey.arrowRight: 'right',
  PhysicalKeyboardKey.arrowLeft: 'left',
  PhysicalKeyboardKey.arrowUp: 'up',
  PhysicalKeyboardKey.arrowDown: 'down',
  PhysicalKeyboardKey.enter: 'enter',
  PhysicalKeyboardKey.escape: 'esc',
  PhysicalKeyboardKey.printScreen: 'printscreen',
  PhysicalKeyboardKey.scrollLock: 'scrolllock',
  PhysicalKeyboardKey.pause: 'pause',
  PhysicalKeyboardKey.insert: 'insert',
  PhysicalKeyboardKey.home: 'home',
  PhysicalKeyboardKey.end: 'end',
  PhysicalKeyboardKey.pageUp: 'pageup',
  PhysicalKeyboardKey.pageDown: 'pagedown',
  PhysicalKeyboardKey.numLock: 'numlock',
  PhysicalKeyboardKey.numpad0: 'num0',
  PhysicalKeyboardKey.numpad1: 'num1',
  PhysicalKeyboardKey.numpad2: 'num2',
  PhysicalKeyboardKey.numpad3: 'num3',
  PhysicalKeyboardKey.numpad4: 'num4',
  PhysicalKeyboardKey.numpad5: 'num5',
  PhysicalKeyboardKey.numpad6: 'num6',
  PhysicalKeyboardKey.numpad7: 'num7',
  PhysicalKeyboardKey.numpad8: 'num8',
  PhysicalKeyboardKey.numpad9: 'num9',
  PhysicalKeyboardKey.digit0: '0',
  PhysicalKeyboardKey.digit1: '1',
  PhysicalKeyboardKey.digit2: '2',
  PhysicalKeyboardKey.digit3: '3',
  PhysicalKeyboardKey.digit4: '4',
  PhysicalKeyboardKey.digit5: '5',
  PhysicalKeyboardKey.digit6: '6',
  PhysicalKeyboardKey.digit7: '7',
  PhysicalKeyboardKey.digit8: '8',
  PhysicalKeyboardKey.digit9: '9',
  PhysicalKeyboardKey.numpadAdd: 'add',
  PhysicalKeyboardKey.numpadSubtract: 'numpadSubtract',
  PhysicalKeyboardKey.numpadMultiply: 'numpadMultiply',
  PhysicalKeyboardKey.numpadDivide: 'numpadDivide',
  PhysicalKeyboardKey.numpadDecimal: 'numpadDecimal',
  PhysicalKeyboardKey.numpadEnter: 'numpadEnter',
  PhysicalKeyboardKey.numpadEqual: 'numpadEqual',
  PhysicalKeyboardKey.keyA: 'a',
  PhysicalKeyboardKey.keyB: 'b',
  PhysicalKeyboardKey.keyC: 'c',
  PhysicalKeyboardKey.keyD: 'd',
  PhysicalKeyboardKey.keyE: 'e',
  PhysicalKeyboardKey.keyF: 'f',
  PhysicalKeyboardKey.keyG: 'g',
  PhysicalKeyboardKey.keyH: 'h',
  PhysicalKeyboardKey.keyI: 'i',
  PhysicalKeyboardKey.keyJ: 'j',
  PhysicalKeyboardKey.keyK: 'k',
  PhysicalKeyboardKey.keyL: 'l',
  PhysicalKeyboardKey.keyM: 'm',
  PhysicalKeyboardKey.keyN: 'n',
  PhysicalKeyboardKey.keyO: 'o',
  PhysicalKeyboardKey.keyP: 'p',
  PhysicalKeyboardKey.keyQ: 'q',
  PhysicalKeyboardKey.keyR: 'r',
  PhysicalKeyboardKey.keyS: 's',
  PhysicalKeyboardKey.keyT: 't',
  PhysicalKeyboardKey.keyU: 'u',
  PhysicalKeyboardKey.keyV: 'v',
  PhysicalKeyboardKey.keyW: 'w',
  PhysicalKeyboardKey.keyX: 'x',
  PhysicalKeyboardKey.keyY: 'y',
  PhysicalKeyboardKey.keyZ: 'z',
};

// 反转 physicalKeyMap 的键值对
final Map<String, PhysicalKeyboardKey> stringToPhysicalKeyMap = Map.fromEntries(
    physicalKeyMap.entries.map((entry) => MapEntry(entry.value, entry.key)));

final mouseEventToNameMap = {
  kBackMouseButton: 'xbutton1',
  kForwardMouseButton: 'xbutton2',
  kMiddleMouseButton: 'middle',
};

String getKeyName(int vkCode) {
  // 先从 Map 中查找对应的键名
  if (keyCodeToNameMap.containsKey(vkCode)) {
    return keyCodeToNameMap[vkCode]!;
  }
  // 处理字母和数字（A-Z, 0-9）
  if (vkCode >= 0x30 && vkCode <= 0x39) {
    // 数字键 0-9
    return String.fromCharCode(vkCode);
  } else if (vkCode >= 0x41 && vkCode <= 0x5A) {
    // 字母 A-Z
    return String.fromCharCode(vkCode).toLowerCase();
  } else if (vkCode >= 0x60 && vkCode <= 0x69) {
    // 小键盘数字
    return 'NumPad ${vkCode - 0x60}';
  }
  return '0x${vkCode.toRadixString(16).padLeft(2, '0')}';
}
